@page "/peliculas/crear"
@inject NavigationManager navigationManager
@inject Irepositorio repositorio
@inject SweetAlertService swal

<h3>Crear Pelicula</h3>

@if(MostrarFormulario is false)
{
    <p>Cargando ...</p>
}
else
{
    <FormularioPeliculas Pelicula="Pelicula" OnValidSubmit="crear" GenerosNoSeleccionados="GenerosNoSeleccionados"></FormularioPeliculas>
}

@code {
    private Pelicula Pelicula = new Pelicula();
    private List<Genero> GenerosNoSeleccionados = new List<Genero>();
    public bool MostrarFormulario { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        var respuestaHttp = await repositorio.Get<List<Genero>>("api/generos");
        GenerosNoSeleccionados = respuestaHttp.response!;
        MostrarFormulario = true;
    }

    async Task crear()
    {
        var httpResponse = await repositorio.Post<Pelicula, int>("api/peliculas", Pelicula);

        if (httpResponse.error)
        {
            var mensajeError = await httpResponse.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            var peliculaId = httpResponse.response;
            navigationManager.NavigateTo($"/pelicula/{peliculaId}/{Pelicula.Titulo.Replace(" ","-")}");
        }
    }
}
